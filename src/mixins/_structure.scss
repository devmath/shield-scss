/*----------STRUCTURE MIXINS----------*/

/* media-query with max-width */
@mixin media-max($breakpoint) {
	@if hasKey($devices, $breakpoint) {
		@media screen and (max-width: $breakpoint) {
			@content;
		}
	}

	@warn 'This breakpoint doesn\'t exist on $devices';
}

/* media-query with min-width */
@mixin media-min($breakpoint) {
	@if hasKey($devices, $breakpoint) {
		@media screen and (min-width: $breakpoint) {
			@content;
		}
	}

	@warn 'This breakpoint doesn\'t exist on $devices';
}

/* media-query with min-width */
@mixin media-between($min, $max) {
	@if hasKey($devices, $min) and hasKey($devices, $max) {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	}

	@warn 'These breakpoints doesn\'t exist on $devices';
}

/* media-query with min-width */
@mixin min-laptop {
	@if hasKey($devices, laptop) {
		@media screen and (min-width: getDevice(laptop)) {
			@content;
		}
	}

	@warn 'laptop breakpoint doesn\'t exist on $devices';
}

/* media-query with min-width */
@mixin min-desktop {
	@if hasKey($devices, desktop) {
		@media screen and (min-width: getDevice(desktop)) {
			@content;
		}
	}

	@warn 'desktop breakpoint doesn\'t exist on $devices';
}

/* media-query with min-width */
@mixin min-tablet {
	@if hasKey($devices, tablet) {
		@media screen and (min-width: getDevice(tablet)) {
			@content;
		}
	}

	@warn 'tablet breakpoint doesn\'t exist on $devices';
}

/* media-query with min-width */
@mixin min-phone {
	@if hasKey($devices, phone) {
		@media screen and (min-width: getDevice(phone)) {
			@content;
		}
	}

	@warn 'phone breakpoint doesn\'t exist on $devices';
}

/* media-query with max-width */
@mixin max-laptop {
	@if hasKey($devices, laptop) {
		@media screen and (max-width: getDevice(laptop)) {
			@content;
		}
	}

	@warn 'laptop breakpoint doesn\'t exist on $devices';
}

/* media-query with max-width */
@mixin max-desktop {
	@if hasKey($devices, desktop) {
		@media screen and (max-width: getDevice(desktop)) {
			@content;
		}
	}

	@warn 'desktop breakpoint doesn\'t exist on $devices';
}

/* media-query with max-width */
@mixin max-tablet {
	@if hasKey($devices, tablet) {
		@media screen and (max-width: getDevice(tablet)) {
			@content;
		}
	}

	@warn 'tablet breakpoint doesn\'t exist on $devices';
}

/* media-query with max-width */
@mixin max-phone {
	@if hasKey($devices, phone) {
		@media screen and (max-width: getDevice(phone)) {
			@content;
		}
	}

	@warn 'phone breakpoint doesn\'t exist on $devices';
}

/* media-query for print */
@mixin media-print {
	@media print {
		@content;
	}
}

/* media-query for retina */
@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (-o-min-device-pixel-ratio: 2/1),
		only screen and (min-device-pixel-ratio: 2),
		only screen and (min-resolution: 192dpi),
		only screen and (min-resolution: 2dppx) { 
			@content;
	}
}

// Define the property for box-sizing
@mixin box-sizing($bs) {
	-webkit-box-sizing: $bs;
	box-sizing: $bs;
}