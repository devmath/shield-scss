//----------HELPERS----------//

// camelCase for map-get()
@function get($map, $val) {
	@return map-get($map, $val);
}

// get $variables map or var
@function getVar($var) {
	@return get($variables, $var);
}

// camelCase for map-has-key()
@function hasKey($map, $key) {
	@if map-has-key($map, $key) {
		@return true;
	} @else {
		@return false;	
	}
}

// camelCase for map-has-key() based on $variables
@function hasKeyVar($key) {
	@if hasKey($variables, $key) {
		@return true;
	} @else {
		@return false;	
	}
}

// camelCase for map-merge()
@function merge($map1, $map2) {
	@return map-merge($map1, $map2);
}

// recursive map-merge(), thanks to sitepoint.com
@function mapExtend($map, $maps.../*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {
				// If value is a nested map and same key from map is a nested map as well
				@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
					// Recursive extend
					$value: map-extend(map-get($map, $key), $value, true);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}

	@return $map;
}

// return aspect ratio
@function ratio($width, $height) {
	@return $width / $height;
}